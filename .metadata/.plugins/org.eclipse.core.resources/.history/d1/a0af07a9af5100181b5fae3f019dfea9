package frsf.cidisi.exercise.smarttoy.search;

import java.util.List;

import domain.Habitacion;
import frsf.cidisi.faia.agent.Perception;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.datastructure.Pair;

/**
 * Represent the internal state of the Agent.
 */
public class AgentSmartToyState extends SearchBasedAgentState {
	
    private Pair<Habitacion, int[]> ubicacionAgente;
    private Pair<Habitacion, int[]> ubicacionInicial;
    private List<Habitacion> plano;
    private boolean[] orientacion = new boolean[4];
	

    public AgentSmartToyState() {
    
    	//TODO: Complete Method
    	/*
			// ubicacionAgente = initData0;
			// ubicacionInicial = initData1;
			// plano = initData2;
			// orientacion = initData3;
        */
        this.initState();
    }

    /**
     * This method clones the state of the agent. It's used in the search
     * process, when creating the search tree.
     */
    @Override
    public SearchBasedAgentState clone() {
        
		//TODO: Complete Method
		
        return null;
    }

    /**
     * This method is used to update the Agent State when a Perception is
     * received by the Simulator.
     */
    @Override
    public void updateState(Perception p) {
        
        //TODO: Complete Method
    }

    /**
     * This method is optional, and sets the initial state of the agent.
     */
    @Override
    public void initState() {
        
	//TODO: Complete Method

    }

    /**
     * This method returns the String representation of the agent state.
     */
    @Override
    public String toString() {
        String str = "";

        //TODO: Complete Method

        return str;
    }

    /**
     * This method is used in the search process to verify if the node already
     * exists in the actual search.
     */
    @Override
    public boolean equals(Object obj) {
       
       //TODO: Complete Method
        
        return true;
    }

    //TODO: Complete this section with agent-specific methods
    // The following methods are agent-specific:
   	
//     public Other getubicacionAgente(){
//        return ubicacionAgente;
//     }
//     public void setubicacionAgente(Other arg){
//        ubicacionAgente = arg;
//     }
//     public Other getubicacionInicial(){
//        return ubicacionInicial;
//     }
//     public void setubicacionInicial(Other arg){
//        ubicacionInicial = arg;
//     }
//     public Other getplano(){
//        return plano;
//     }
//     public void setplano(Other arg){
//        plano = arg;
//     }
//     public Other getorientacion(){
//        return orientacion;
//     }
//     public void setorientacion(Other arg){
//        orientacion = arg;
//     }
	
}

